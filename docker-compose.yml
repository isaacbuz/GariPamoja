version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: garipamoja_postgres
    environment:
      POSTGRES_DB: garipamoja
      POSTGRES_USER: garipamoja_user
      POSTGRES_PASSWORD: garipamoja_password
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./backend/init.sql:/docker-entrypoint-initdb.d/init.sql
    ports:
      - "5432:5432"
    networks:
      - garipamoja_network

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: garipamoja_redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - garipamoja_network

  # Django Backend
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: garipamoja_backend
    environment:
      - DATABASE_URL=postgresql://garipamoja_user:garipamoja_password@postgres:5432/garipamoja
      - REDIS_URL=redis://redis:6379/0
      - DEBUG=True
      - SECRET_KEY=your-secret-key-here
      - ALLOWED_HOSTS=localhost,127.0.0.1
      - CORS_ALLOWED_ORIGINS=http://localhost:3000,http://localhost:19006
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - ANTHROPIC_API_KEY=${ANTHROPIC_API_KEY}
      - FLUTTERWAVE_SECRET_KEY=${FLUTTERWAVE_SECRET_KEY}
      - COINBASE_COMMERCE_API_KEY=${COINBASE_COMMERCE_API_KEY}
      - AWS_ACCESS_KEY_ID=${AWS_ACCESS_KEY_ID}
      - AWS_SECRET_ACCESS_KEY=${AWS_SECRET_ACCESS_KEY}
      - AWS_S3_BUCKET=${AWS_S3_BUCKET}
      - TWILIO_ACCOUNT_SID=${TWILIO_ACCOUNT_SID}
      - TWILIO_AUTH_TOKEN=${TWILIO_AUTH_TOKEN}
      - FIREBASE_SERVER_KEY=${FIREBASE_SERVER_KEY}
    volumes:
      - ./backend:/app
      - static_volume:/app/staticfiles
      - media_volume:/app/media
    ports:
      - "8000:8000"
    depends_on:
      - postgres
      - redis
    networks:
      - garipamoja_network
    command: >
      sh -c "python manage.py migrate &&
             python manage.py collectstatic --noinput &&
             gunicorn garipamoja.wsgi:application --bind 0.0.0.0:8000 --workers 4"

  # AI Services
  ai-services:
    build:
      context: ./ai-services
      dockerfile: Dockerfile
    container_name: garipamoja_ai_services
    environment:
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - ANTHROPIC_API_KEY=${ANTHROPIC_API_KEY}
      - REDIS_URL=redis://redis:6379/1
      - BACKEND_URL=http://backend:8000
      - MODEL_ENDPOINT=${MODEL_ENDPOINT}
    volumes:
      - ./ai-services:/app
    ports:
      - "8001:8001"
    depends_on:
      - redis
      - backend
    networks:
      - garipamoja_network
    command: python app.py

  # React Native Frontend (Expo)
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: garipamoja_frontend
    environment:
      - EXPO_PUBLIC_API_URL=http://localhost:8000
      - EXPO_PUBLIC_AI_SERVICE_URL=http://localhost:8001
      - EXPO_PUBLIC_GOOGLE_MAPS_API_KEY=${GOOGLE_MAPS_API_KEY}
      - EXPO_PUBLIC_STRIPE_PUBLISHABLE_KEY=${STRIPE_PUBLISHABLE_KEY}
    volumes:
      - ./frontend:/app
      - /app/node_modules
    ports:
      - "19000:19000"
      - "19001:19001"
      - "19002:19002"
    depends_on:
      - backend
    networks:
      - garipamoja_network
    command: npx expo start --host 0.0.0.0

  # Nginx Reverse Proxy
  nginx:
    image: nginx:alpine
    container_name: garipamoja_nginx
    volumes:
      - ./infrastructure/nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./infrastructure/nginx/ssl:/etc/nginx/ssl
      - static_volume:/var/www/static
      - media_volume:/var/www/media
    ports:
      - "80:80"
      - "443:443"
    depends_on:
      - backend
      - ai-services
      - frontend
    networks:
      - garipamoja_network

  # Celery Worker for Background Tasks
  celery:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: garipamoja_celery
    environment:
      - DATABASE_URL=postgresql://garipamoja_user:garipamoja_password@postgres:5432/garipamoja
      - REDIS_URL=redis://redis:6379/0
      - CELERY_BROKER_URL=redis://redis:6379/0
      - CELERY_RESULT_BACKEND=redis://redis:6379/0
    volumes:
      - ./backend:/app
    depends_on:
      - postgres
      - redis
    networks:
      - garipamoja_network
    command: celery -A garipamoja worker --loglevel=info

  # Celery Beat for Scheduled Tasks
  celery-beat:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: garipamoja_celery_beat
    environment:
      - DATABASE_URL=postgresql://garipamoja_user:garipamoja_password@postgres:5432/garipamoja
      - REDIS_URL=redis://redis:6379/0
      - CELERY_BROKER_URL=redis://redis:6379/0
      - CELERY_RESULT_BACKEND=redis://redis:6379/0
    volumes:
      - ./backend:/app
    depends_on:
      - postgres
      - redis
    networks:
      - garipamoja_network
    command: celery -A garipamoja beat --loglevel=info

  # Monitoring - Prometheus
  prometheus:
    image: prom/prometheus:latest
    container_name: garipamoja_prometheus
    volumes:
      - ./infrastructure/monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    ports:
      - "9090:9090"
    networks:
      - garipamoja_network

  # Monitoring - Grafana
  grafana:
    image: grafana/grafana:latest
    container_name: garipamoja_grafana
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin
    volumes:
      - grafana_data:/var/lib/grafana
      - ./infrastructure/monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards
      - ./infrastructure/monitoring/grafana/datasources:/etc/grafana/provisioning/datasources
    ports:
      - "3000:3000"
    depends_on:
      - prometheus
    networks:
      - garipamoja_network

  # Blockchain Node (Ethereum Testnet)
  blockchain:
    image: ethereum/client-go:stable
    container_name: garipamoja_blockchain
    command: >
      --testnet
      --syncmode light
      --http
      --http.addr 0.0.0.0
      --http.port 8545
      --http.corsdomain "*"
      --http.api eth,net,web3,personal
      --allow-insecure-unlock
    ports:
      - "8545:8545"
    networks:
      - garipamoja_network

volumes:
  postgres_data:
  redis_data:
  static_volume:
  media_volume:
  prometheus_data:
  grafana_data:

networks:
  garipamoja_network:
    driver: bridge 